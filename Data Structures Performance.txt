Functional
garbage collector - 25.41% / 1040ms
makeStack - 8.42% / 345ms
stack.push - 3.26% / 133ms
pop - 0.25% / 10ms

Functional-shared
_.extend - 15.19% (total 32.65%) 740ms / 1590ms
garbage collector - 9.60% / 468ms
makeStack.stackMethods.push - 0.21% / 10ms
pop - 0.02% / 1ms

Prototypal
garbage collector - 15.89% / 406ms
push - 0.27 / 7ms
pop - ???

Pseudoclassical
garbage collector - 351ms
push - 5ms

We created an array of 500,000 stacks, and did a few push and pop operations with random numbers generated by Math.random. For stacks, we found that prototypal and pseudoclassical instantiation methods were far more performant than were functional and functional shared. We think this is because prototypal and pseudoclassical approaches do not need to copy methods and properties across all instances. Pseudoclassical was slightly faster than prototypal (about 1-2%), probably because pseudoclassical instantiation does not need to use Object.create.